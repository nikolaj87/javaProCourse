package algorythms.hometask.task11;

public class Task1_2 {
 /*
       1 уровень сложности: Task 1. Вы работаете в фирме по производству мебели и
       поставляете мебель по всей стране. Коробки с мебелью размещаются в грузовике.
       Все коробки имеют разный размер, и вы стараетесь наиболее эффективно
       использовать доступное пространство. Как выбрать коробки для того,
       чтобы загрузка имела максимальную эффективность? Предложите жадную стратегию.
       Будет ли полученное решение оптимальным?

        1. Расставляем коробки по размерам от большей к меньшей или чисто прикидываем на глаз.
        2. Пытаемся втолкнуть наибольшую.
        3. При успехе повторяем действие толкая наибольшие.
        4. А если не получилось, то берем слудующую чуть поменьше.
        5. И так до самой маленькой пока не убедимся что она не влезает.
        Тоесть за сложность О(n) делаем загрузку грузовика и отправляем его в путь.
        6. На секономленные деньги на команде программистов, которые предложат нам алгоритм
        O(n*n) для каждой загрузки, везем семью на море.

        алгоритм не будет оптимальным, но учитывая большое кол-во коробок, их похожий размер жадный
        алгоритм может оправдать себя.

       Task 2. Вы едете в отпуск, и у вас есть семь дней на знакомство с достопримечательностями.
       Вы присваиваете каждой достопримечательности стоимость в баллах (насколько вы хотите ее увидеть)
       и оцениваете продолжительность поездки. Как обеспечить максимальную стоимость
       (увидеть самое важное) во время поездки? Предложите жадную стратегию. Будет ли полученное
       решение оптимальным?

       1. Нам надо оценить по своей шкале баллами от 1 до 10 свое желание посетить данную локацию.
       также мы знаем сколько часов или дней необходимо для этого. Если мы поделим баллы на дни то
       получим для каждой локации коэфициэнт баллочасов.
       2. Едем в локацию с наивысшим коэфициэнтом баллочасов.
       3. По возвращению проверяем хватит ли нам времени на следующую в списке локацию. И едем туда.
       4. Если не хватит времени - выбираем вариант похуже но с более коротким временем.
       И так, пока не закончится отпуск или локации.

       Алгоритм не будет оптимальным. Для оптимальности нужно устроить задачу с рюкзаком и складывать
       в него достопримичательности :) c исспользованием динамического решения результат будет лучше
 */
}
